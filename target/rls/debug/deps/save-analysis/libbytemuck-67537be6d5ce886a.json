{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0","program":"/Users/louisjohnson/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=67537be6d5ce886a","-C","extra-filename=-67537be6d5ce886a","--out-dir","/Users/louisjohnson/Desktop/Rust/aseprite-packer/target/rls/debug/deps","-L","dependency=/Users/louisjohnson/Desktop/Rust/aseprite-packer/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/louisjohnson/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/louisjohnson/Desktop/Rust/aseprite-packer/target/rls/debug/deps/libbytemuck-67537be6d5ce886a.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[7221008603350589257,6859148759202288145]},"crate_root":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src","external_crates":[{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[1844954537018218648,16570159001010767920]}},{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16437105423049283034,13312228696766436902]}},{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13569262031960136914,926278369663005569]}}],"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":0,"byte_end":14647,"line_start":1,"line_end":460,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1894,"byte_end":1898,"line_start":51,"line_end":51,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":0,"byte_end":14647,"line_start":1,"line_end":460,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":563},{"krate":0,"index":584},{"krate":0,"index":582},{"krate":0,"index":581},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":572},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"! This crate gives small utilities for casting between plain data types.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":35,"byte_end":109,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":110,"byte_end":113,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! ## Basics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":114,"byte_end":127,"line_start":6,"line_end":6,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":128,"byte_end":131,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":132,"byte_end":205,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"! functions:","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":206,"byte_end":220,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":221,"byte_end":224,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! * `T` uses [`cast`]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":225,"byte_end":248,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"! * `&T` uses [`cast_ref`]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":249,"byte_end":277,"line_start":12,"line_end":12,"column_start":1,"column_end":29}},{"value":"! * `&mut T` uses [`cast_mut`]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":278,"byte_end":310,"line_start":13,"line_end":13,"column_start":1,"column_end":33}},{"value":"! * `&[T]` uses [`cast_slice`]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":311,"byte_end":343,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"! * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":344,"byte_end":384,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":385,"byte_end":388,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":389,"byte_end":464,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"! casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":465,"byte_end":544,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"! isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":545,"byte_end":625,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"! will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":626,"byte_end":705,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"! invalid input.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":706,"byte_end":724,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":725,"byte_end":728,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! ## Using Your Own Types","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":729,"byte_end":756,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":757,"byte_end":760,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":761,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"! sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":833,"byte_end":873,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":874,"byte_end":877,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":878,"byte_end":953,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"! traits for your type and then they'll have full casting support. However,","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":954,"byte_end":1031,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"! these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1032,"byte_end":1109,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"! before adding the them to your own types.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1110,"byte_end":1155,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1156,"byte_end":1159,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ## Features","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1160,"byte_end":1175,"line_start":33,"line_end":33,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1176,"byte_end":1179,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1180,"byte_end":1260,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"!   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1261,"byte_end":1340,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"!   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1341,"byte_end":1420,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"!   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":1421,"byte_end":1491,"line_start":38,"line_end":38,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15582,"byte_end":15590,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":15}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15124,"byte_end":15175,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15176,"byte_end":15210,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15211,"byte_end":15214,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15215,"byte_end":15278,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15279,"byte_end":15335,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15336,"byte_end":15339,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15340,"byte_end":15353,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15354,"byte_end":15357,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15358,"byte_end":15399,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15400,"byte_end":15447,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15448,"byte_end":15521,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15522,"byte_end":15564,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15870,"byte_end":15876,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15602,"byte_end":15642,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15645,"byte_end":15648,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15651,"byte_end":15726,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15729,"byte_end":15807,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15810,"byte_end":15852,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15855,"byte_end":15864,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21054,"byte_end":21057,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":19758,"byte_end":19796,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":19797,"byte_end":19800,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":19801,"byte_end":19878,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":19879,"byte_end":19958,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":19959,"byte_end":20039,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20040,"byte_end":20058,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20059,"byte_end":20062,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20063,"byte_end":20139,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20140,"byte_end":20211,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20212,"byte_end":20286,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20287,"byte_end":20305,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20306,"byte_end":20309,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20310,"byte_end":20323,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20324,"byte_end":20327,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20328,"byte_end":20368,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20369,"byte_end":20416,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20417,"byte_end":20495,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20496,"byte_end":20524,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any padding bytes, either in the middle or on","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20525,"byte_end":20602,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20603,"byte_end":20683,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20684,"byte_end":20764,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20765,"byte_end":20780,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20781,"byte_end":20835,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20836,"byte_end":20911,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20912,"byte_end":20991,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":20992,"byte_end":21036,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":156},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26750,"byte_end":26760,"line_start":79,"line_end":79,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":23782,"byte_end":23810,"line_start":4,"line_end":4,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":23811,"byte_end":23814,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":23815,"byte_end":23890,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":23891,"byte_end":23957,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":23958,"byte_end":24002,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24003,"byte_end":24006,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24007,"byte_end":24086,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24087,"byte_end":24167,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24168,"byte_end":24230,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24231,"byte_end":24234,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24235,"byte_end":24313,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24314,"byte_end":24389,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24390,"byte_end":24418,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24419,"byte_end":24422,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24423,"byte_end":24436,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24437,"byte_end":24440,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24441,"byte_end":24448,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24449,"byte_end":24480,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24481,"byte_end":24496,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24497,"byte_end":24541,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24542,"byte_end":24556,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24557,"byte_end":24569,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24570,"byte_end":24582,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24583,"byte_end":24595,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24596,"byte_end":24608,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24609,"byte_end":24621,"line_start":29,"line_end":29,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24622,"byte_end":24627,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24628,"byte_end":24664,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24665,"byte_end":24685,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24686,"byte_end":24727,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24728,"byte_end":24769,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24770,"byte_end":24775,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24776,"byte_end":24830,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24831,"byte_end":24874,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24875,"byte_end":24916,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24917,"byte_end":24924,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24925,"byte_end":24937,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24938,"byte_end":24941,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":24942,"byte_end":25015,"line_start":42,"line_end":42,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25016,"byte_end":25029,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25030,"byte_end":25033,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25034,"byte_end":25111,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25112,"byte_end":25191,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25192,"byte_end":25246,"line_start":47,"line_end":47,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25247,"byte_end":25250,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25251,"byte_end":25331,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25332,"byte_end":25354,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25355,"byte_end":25358,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25359,"byte_end":25439,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25440,"byte_end":25496,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25497,"byte_end":25500,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25501,"byte_end":25576,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25577,"byte_end":25649,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25650,"byte_end":25719,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25720,"byte_end":25723,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25724,"byte_end":25802,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25803,"byte_end":25879,"line_start":60,"line_end":60,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25880,"byte_end":25891,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25892,"byte_end":25895,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25896,"byte_end":25968,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":25969,"byte_end":26047,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26048,"byte_end":26124,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26125,"byte_end":26204,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26205,"byte_end":26208,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26209,"byte_end":26281,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26282,"byte_end":26347,"line_start":69,"line_end":69,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26348,"byte_end":26351,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26352,"byte_end":26429,"line_start":71,"line_end":71,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26430,"byte_end":26452,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26453,"byte_end":26456,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26457,"byte_end":26536,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26537,"byte_end":26570,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26571,"byte_end":26574,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26575,"byte_end":26652,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26653,"byte_end":26732,"line_start":78,"line_end":78,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":157},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27585,"byte_end":27588,"line_start":97,"line_end":97,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26781,"byte_end":26852,"line_start":80,"line_end":80,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26855,"byte_end":26864,"line_start":81,"line_end":81,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26867,"byte_end":26870,"line_start":82,"line_end":82,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26873,"byte_end":26945,"line_start":83,"line_end":83,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26948,"byte_end":27014,"line_start":84,"line_end":84,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27017,"byte_end":27085,"line_start":85,"line_end":85,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27088,"byte_end":27130,"line_start":86,"line_end":86,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27133,"byte_end":27136,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27139,"byte_end":27216,"line_start":88,"line_end":88,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27219,"byte_end":27241,"line_start":89,"line_end":89,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27244,"byte_end":27247,"line_start":90,"line_end":90,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27250,"byte_end":27319,"line_start":91,"line_end":91,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27322,"byte_end":27398,"line_start":92,"line_end":92,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27401,"byte_end":27470,"line_start":93,"line_end":93,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27473,"byte_end":27511,"line_start":94,"line_end":94,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27514,"byte_end":27517,"line_start":95,"line_end":95,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27520,"byte_end":27577,"line_start":96,"line_end":96,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27679,"byte_end":27688,"line_start":100,"line_end":100,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27605,"byte_end":27670,"line_start":99,"line_end":99,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27778,"byte_end":27787,"line_start":103,"line_end":103,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27704,"byte_end":27769,"line_start":102,"line_end":102,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28452,"byte_end":28464,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27803,"byte_end":27871,"line_start":105,"line_end":105,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27874,"byte_end":27937,"line_start":106,"line_end":106,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27940,"byte_end":27943,"line_start":107,"line_end":107,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":27946,"byte_end":28020,"line_start":108,"line_end":108,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28023,"byte_end":28090,"line_start":109,"line_end":109,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28093,"byte_end":28161,"line_start":110,"line_end":110,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28164,"byte_end":28167,"line_start":111,"line_end":111,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28170,"byte_end":28182,"line_start":112,"line_end":112,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28185,"byte_end":28188,"line_start":113,"line_end":113,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28191,"byte_end":28264,"line_start":114,"line_end":114,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28267,"byte_end":28313,"line_start":115,"line_end":115,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28316,"byte_end":28319,"line_start":116,"line_end":116,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28322,"byte_end":28396,"line_start":117,"line_end":117,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28399,"byte_end":28434,"line_start":118,"line_end":118,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":28437,"byte_end":28446,"line_start":119,"line_end":119,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":30015,"byte_end":30027,"line_start":155,"line_end":155,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29331,"byte_end":29406,"line_start":139,"line_end":139,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29409,"byte_end":29485,"line_start":140,"line_end":140,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29488,"byte_end":29500,"line_start":141,"line_end":141,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29503,"byte_end":29506,"line_start":142,"line_end":142,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29509,"byte_end":29583,"line_start":143,"line_end":143,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29586,"byte_end":29653,"line_start":144,"line_end":144,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29656,"byte_end":29724,"line_start":145,"line_end":145,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29727,"byte_end":29730,"line_start":146,"line_end":146,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29733,"byte_end":29745,"line_start":147,"line_end":147,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29748,"byte_end":29751,"line_start":148,"line_end":148,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29754,"byte_end":29827,"line_start":149,"line_end":149,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29830,"byte_end":29876,"line_start":150,"line_end":150,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29879,"byte_end":29882,"line_start":151,"line_end":151,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29885,"byte_end":29959,"line_start":152,"line_end":152,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":29962,"byte_end":29997,"line_start":153,"line_end":153,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":30000,"byte_end":30009,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":169},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40190,"byte_end":40208,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner: ?Sized>","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37101,"byte_end":37176,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37177,"byte_end":37206,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37207,"byte_end":37210,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37211,"byte_end":37283,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37284,"byte_end":37362,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37363,"byte_end":37441,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37442,"byte_end":37518,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37519,"byte_end":37595,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37596,"byte_end":37644,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37645,"byte_end":37648,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37649,"byte_end":37661,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37662,"byte_end":37665,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37666,"byte_end":37735,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37736,"byte_end":37739,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37740,"byte_end":37811,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37812,"byte_end":37815,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37816,"byte_end":37888,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37889,"byte_end":37951,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":37952,"byte_end":38031,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38032,"byte_end":38111,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38112,"byte_end":38142,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38143,"byte_end":38146,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38147,"byte_end":38227,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38228,"byte_end":38289,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38290,"byte_end":38293,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38294,"byte_end":38368,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38369,"byte_end":38384,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38385,"byte_end":38463,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38464,"byte_end":38542,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38543,"byte_end":38546,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38547,"byte_end":38618,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38619,"byte_end":38622,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38623,"byte_end":38637,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38638,"byte_end":38641,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38642,"byte_end":38721,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38722,"byte_end":38801,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38802,"byte_end":38877,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38878,"byte_end":38947,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38948,"byte_end":38985,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38986,"byte_end":38989,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":38990,"byte_end":39068,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39069,"byte_end":39137,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39138,"byte_end":39141,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39142,"byte_end":39156,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39157,"byte_end":39160,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39161,"byte_end":39173,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39174,"byte_end":39177,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39178,"byte_end":39185,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39186,"byte_end":39223,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39224,"byte_end":39248,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39249,"byte_end":39278,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39279,"byte_end":39282,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39283,"byte_end":39307,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39308,"byte_end":39341,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39342,"byte_end":39345,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39346,"byte_end":39409,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39410,"byte_end":39413,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39414,"byte_end":39473,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39474,"byte_end":39512,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39513,"byte_end":39573,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39574,"byte_end":39577,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39578,"byte_end":39605,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39606,"byte_end":39652,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39653,"byte_end":39725,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39726,"byte_end":39729,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39730,"byte_end":39787,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39788,"byte_end":39795,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39796,"byte_end":39799,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39800,"byte_end":39839,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39840,"byte_end":39843,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39844,"byte_end":39851,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39852,"byte_end":39889,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39890,"byte_end":39893,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39894,"byte_end":39918,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39919,"byte_end":39944,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39945,"byte_end":39948,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":39949,"byte_end":40007,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40008,"byte_end":40011,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40012,"byte_end":40055,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40056,"byte_end":40089,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40090,"byte_end":40093,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40094,"byte_end":40124,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40125,"byte_end":40164,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40165,"byte_end":40172,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40295,"byte_end":40299,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"pub fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40228,"byte_end":40277,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40280,"byte_end":40289,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40616,"byte_end":40624,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40513,"byte_end":40586,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40589,"byte_end":40598,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":40601,"byte_end":40610,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":41319,"byte_end":41327,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":41200,"byte_end":41277,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":41280,"byte_end":41301,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":41304,"byte_end":41313,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":41996,"byte_end":42006,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"pub fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":41907,"byte_end":41978,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":41981,"byte_end":41990,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":42550,"byte_end":42564,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"pub fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":42439,"byte_end":42512,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":42515,"byte_end":42532,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":42535,"byte_end":42544,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43070,"byte_end":43074,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"pub fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43003,"byte_end":43052,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43055,"byte_end":43064,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43284,"byte_end":43292,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"pub fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43181,"byte_end":43254,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43257,"byte_end":43266,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43269,"byte_end":43278,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43987,"byte_end":43995,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"pub fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43868,"byte_end":43944,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43947,"byte_end":43969,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":43972,"byte_end":43981,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":44664,"byte_end":44674,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"pub fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":44575,"byte_end":44646,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":44649,"byte_end":44658,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":45219,"byte_end":45233,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"pub fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":45108,"byte_end":45183,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":45186,"byte_end":45201,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":45204,"byte_end":45213,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":185},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4192,"byte_end":4200,"line_start":123,"line_end":123,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: Pod>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":3983,"byte_end":4017,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4018,"byte_end":4021,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4022,"byte_end":4100,"line_start":120,"line_end":120,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4101,"byte_end":4174,"line_start":121,"line_end":121,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4175,"byte_end":4184,"line_start":122,"line_end":122,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":187},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4615,"byte_end":4627,"line_start":139,"line_end":139,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: Pod>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4398,"byte_end":4440,"line_start":134,"line_end":134,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4441,"byte_end":4444,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4445,"byte_end":4523,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4524,"byte_end":4597,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4598,"byte_end":4607,"line_start":138,"line_end":138,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4971,"byte_end":4981,"line_start":156,"line_end":156,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: Pod>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4841,"byte_end":4875,"line_start":150,"line_end":150,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4876,"byte_end":4879,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4880,"byte_end":4893,"line_start":152,"line_end":152,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4894,"byte_end":4897,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4898,"byte_end":4953,"line_start":154,"line_end":154,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":4954,"byte_end":4963,"line_start":155,"line_end":155,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5254,"byte_end":5268,"line_start":169,"line_end":169,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: Pod>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5112,"byte_end":5154,"line_start":163,"line_end":163,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5155,"byte_end":5158,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5159,"byte_end":5172,"line_start":165,"line_end":165,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5173,"byte_end":5176,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5177,"byte_end":5236,"line_start":167,"line_end":167,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5237,"byte_end":5246,"line_start":168,"line_end":168,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5609,"byte_end":5623,"line_start":183,"line_end":183,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: Pod>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5415,"byte_end":5449,"line_start":176,"line_end":176,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5450,"byte_end":5453,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5454,"byte_end":5468,"line_start":178,"line_end":178,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5469,"byte_end":5472,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5473,"byte_end":5522,"line_start":180,"line_end":180,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5523,"byte_end":5591,"line_start":181,"line_end":181,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5592,"byte_end":5601,"line_start":182,"line_end":182,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6130,"byte_end":6148,"line_start":200,"line_end":200,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: Pod>(&mut [u8]) -> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5928,"byte_end":5970,"line_start":193,"line_end":193,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5971,"byte_end":5974,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5975,"byte_end":5989,"line_start":195,"line_end":195,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5990,"byte_end":5993,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":5994,"byte_end":6043,"line_start":197,"line_end":197,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6044,"byte_end":6112,"line_start":198,"line_end":198,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6113,"byte_end":6122,"line_start":199,"line_end":199,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":564},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6746,"byte_end":6786,"line_start":217,"line_end":217,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6623,"byte_end":6695,"line_start":215,"line_end":215,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6698,"byte_end":6743,"line_start":216,"line_end":216,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":566},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6972,"byte_end":6996,"line_start":221,"line_end":221,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6790,"byte_end":6858,"line_start":218,"line_end":218,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6861,"byte_end":6936,"line_start":219,"line_end":219,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6939,"byte_end":6969,"line_start":220,"line_end":220,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":568},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7217,"byte_end":7229,"line_start":225,"line_end":225,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7000,"byte_end":7075,"line_start":222,"line_end":222,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7078,"byte_end":7151,"line_start":223,"line_end":223,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7154,"byte_end":7214,"line_start":224,"line_end":224,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":570},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7520,"byte_end":7537,"line_start":232,"line_end":232,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7233,"byte_end":7307,"line_start":226,"line_end":226,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7310,"byte_end":7341,"line_start":227,"line_end":227,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7344,"byte_end":7347,"line_start":228,"line_end":228,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7350,"byte_end":7426,"line_start":229,"line_end":229,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7429,"byte_end":7504,"line_start":230,"line_end":230,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7507,"byte_end":7517,"line_start":231,"line_end":231,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":563},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6606,"byte_end":6618,"line_start":214,"line_end":214,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n\n    /// You tried to cast a slice to an element type with a higher alignment\n    /// requirement but the slice wasn't aligned.\n    TargetAlignmentGreaterAndInputNotAligned,\n\n    /// If the element size changes then the output slice changes length\n    /// accordingly. If the output slice wouldn't be a whole number of elements\n    /// then the conversion fails.\n    OutputSliceWouldHaveSlop,\n\n    /// When casting a slice you can't convert between ZST elements and non-ZST\n    /// elements. When casting an individual `T`, `&T`, or `&mut T` value the\n    /// source size and destination size must be an exact match.\n    SizeMismatch,\n\n    /// For this type of cast the alignments must be exactly the same and they\n    /// were not so now you're sad.\n    ///\n    /// This error is generated **only** by operations that cast allocated types\n    /// (such as `Box` and `Vec`), because in that case the alignment must stay\n    /// exact.\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":6472,"byte_end":6545,"line_start":212,"line_end":212,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":199},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7942,"byte_end":7946,"line_start":249,"line_end":249,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: Pod, B: Pod>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7803,"byte_end":7824,"line_start":243,"line_end":243,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7825,"byte_end":7828,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7829,"byte_end":7842,"line_start":245,"line_end":245,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7843,"byte_end":7846,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7847,"byte_end":7924,"line_start":247,"line_end":247,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7925,"byte_end":7934,"line_start":248,"line_end":248,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":202},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8266,"byte_end":8274,"line_start":263,"line_end":263,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: Pod, B: Pod>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8140,"byte_end":8172,"line_start":257,"line_end":257,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8173,"byte_end":8176,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8177,"byte_end":8190,"line_start":259,"line_end":259,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8191,"byte_end":8194,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8195,"byte_end":8248,"line_start":261,"line_end":261,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8249,"byte_end":8258,"line_start":262,"line_end":262,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8794,"byte_end":8802,"line_start":284,"line_end":284,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: Pod, B: Pod>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8676,"byte_end":8700,"line_start":278,"line_end":278,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8701,"byte_end":8704,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8705,"byte_end":8718,"line_start":280,"line_end":280,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8719,"byte_end":8722,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8723,"byte_end":8776,"line_start":282,"line_end":282,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":8777,"byte_end":8786,"line_start":283,"line_end":283,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":208},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9320,"byte_end":9330,"line_start":305,"line_end":305,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: Pod, B: Pod>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9196,"byte_end":9224,"line_start":299,"line_end":299,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9225,"byte_end":9228,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9229,"byte_end":9242,"line_start":301,"line_end":301,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9243,"byte_end":9246,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9247,"byte_end":9302,"line_start":303,"line_end":303,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9303,"byte_end":9312,"line_start":304,"line_end":304,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9606,"byte_end":9620,"line_start":318,"line_end":318,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: Pod, B: Pod>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9470,"byte_end":9506,"line_start":312,"line_end":312,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9507,"byte_end":9510,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9511,"byte_end":9524,"line_start":314,"line_end":314,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9525,"byte_end":9528,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9529,"byte_end":9588,"line_start":316,"line_end":316,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9589,"byte_end":9598,"line_start":317,"line_end":317,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9851,"byte_end":9863,"line_start":327,"line_end":327,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: Pod, U: Pod>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9776,"byte_end":9833,"line_start":325,"line_end":325,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9834,"byte_end":9843,"line_start":326,"line_end":326,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10032,"byte_end":10048,"line_start":333,"line_end":333,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: Pod, U: Pod>(&mut [T])\n-> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":9953,"byte_end":10014,"line_start":331,"line_end":331,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10015,"byte_end":10024,"line_start":332,"line_end":332,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":220},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10550,"byte_end":10558,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: Pod, B: Pod>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10163,"byte_end":10192,"line_start":339,"line_end":339,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10193,"byte_end":10196,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10197,"byte_end":10274,"line_start":341,"line_end":341,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10275,"byte_end":10354,"line_start":342,"line_end":342,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10355,"byte_end":10433,"line_start":343,"line_end":343,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10434,"byte_end":10453,"line_start":344,"line_end":344,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10454,"byte_end":10457,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10458,"byte_end":10472,"line_start":346,"line_end":346,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10473,"byte_end":10476,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10477,"byte_end":10532,"line_start":348,"line_end":348,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10533,"byte_end":10542,"line_start":349,"line_end":349,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10946,"byte_end":10958,"line_start":365,"line_end":365,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: Pod, B: Pod>(&A) -> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10753,"byte_end":10789,"line_start":358,"line_end":358,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10790,"byte_end":10793,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10794,"byte_end":10808,"line_start":360,"line_end":360,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10809,"byte_end":10812,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10813,"byte_end":10865,"line_start":362,"line_end":362,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10866,"byte_end":10928,"line_start":363,"line_end":363,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":10929,"byte_end":10938,"line_start":364,"line_end":364,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":11536,"byte_end":11548,"line_start":383,"line_end":383,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: Pod, B: Pod>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":11434,"byte_end":11478,"line_start":379,"line_end":379,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":11479,"byte_end":11482,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":11483,"byte_end":11518,"line_start":381,"line_end":381,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":11519,"byte_end":11528,"line_start":382,"line_end":382,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12788,"byte_end":12802,"line_start":413,"line_end":413,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: Pod, B: Pod>(&[A]) -> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12030,"byte_end":12103,"line_start":397,"line_end":397,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12104,"byte_end":12107,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12108,"byte_end":12167,"line_start":399,"line_end":399,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12168,"byte_end":12237,"line_start":400,"line_end":400,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12238,"byte_end":12241,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12242,"byte_end":12256,"line_start":402,"line_end":402,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12257,"byte_end":12260,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12261,"byte_end":12341,"line_start":404,"line_end":404,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12342,"byte_end":12362,"line_start":405,"line_end":405,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12363,"byte_end":12440,"line_start":406,"line_end":406,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12441,"byte_end":12517,"line_start":407,"line_end":407,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12518,"byte_end":12598,"line_start":408,"line_end":408,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12599,"byte_end":12623,"line_start":409,"line_end":409,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12624,"byte_end":12749,"line_start":410,"line_end":410,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12750,"byte_end":12770,"line_start":411,"line_end":411,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":12771,"byte_end":12780,"line_start":412,"line_end":412,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":232},"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":13765,"byte_end":13783,"line_start":437,"line_end":437,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: Pod, B: Pod>(&mut [A])\n-> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":13619,"byte_end":13691,"line_start":432,"line_end":432,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":13692,"byte_end":13704,"line_start":433,"line_end":433,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":13705,"byte_end":13708,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":13709,"byte_end":13747,"line_start":435,"line_end":435,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":13748,"byte_end":13757,"line_start":436,"line_end":436,"column_start":1,"column_end":10}}]}],"impls":[{"id":16,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16517,"byte_end":16525,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16558,"byte_end":16564,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16604,"byte_end":16610,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16651,"byte_end":16657,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16698,"byte_end":16704,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16745,"byte_end":16751,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16793,"byte_end":16799,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16842,"byte_end":16848,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16888,"byte_end":16894,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16935,"byte_end":16941,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16982,"byte_end":16988,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17029,"byte_end":17035,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17077,"byte_end":17083,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17208,"byte_end":17214,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17268,"byte_end":17279,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17324,"byte_end":17336,"line_start":62,"line_end":62,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19212,"byte_end":19219,"line_start":136,"line_end":136,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19287,"byte_end":19293,"line_start":138,"line_end":138,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19361,"byte_end":19368,"line_start":140,"line_end":140,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19436,"byte_end":19443,"line_start":142,"line_end":142,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19511,"byte_end":19517,"line_start":144,"line_end":144,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19585,"byte_end":19592,"line_start":146,"line_end":146,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21525,"byte_end":21533,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21561,"byte_end":21567,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21602,"byte_end":21608,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21644,"byte_end":21650,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21686,"byte_end":21692,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21728,"byte_end":21734,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21771,"byte_end":21777,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21815,"byte_end":21821,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21856,"byte_end":21862,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21898,"byte_end":21904,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21940,"byte_end":21946,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21982,"byte_end":21988,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":22025,"byte_end":22031,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":22342,"byte_end":22353,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":22388,"byte_end":22400,"line_start":69,"line_end":69,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23258,"byte_end":23265,"line_start":97,"line_end":97,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23328,"byte_end":23334,"line_start":99,"line_end":99,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23397,"byte_end":23404,"line_start":101,"line_end":101,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23467,"byte_end":23474,"line_start":103,"line_end":103,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23537,"byte_end":23543,"line_start":105,"line_end":105,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23606,"byte_end":23613,"line_start":107,"line_end":107,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":45725,"byte_end":45733,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7604,"byte_end":7616,"line_start":235,"line_end":235,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":15592,"byte_end":15597,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":1932},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16517,"byte_end":16525,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":11746},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16558,"byte_end":16564,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16604,"byte_end":16610,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16651,"byte_end":16657,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16698,"byte_end":16704,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16745,"byte_end":16751,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16793,"byte_end":16799,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16842,"byte_end":16848,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16888,"byte_end":16894,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16935,"byte_end":16941,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":16982,"byte_end":16988,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17029,"byte_end":17035,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17077,"byte_end":17083,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17208,"byte_end":17214,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17268,"byte_end":17279,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":1945},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":17324,"byte_end":17336,"line_start":62,"line_end":62,"column_start":39,"column_end":51},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":15830},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19212,"byte_end":19219,"line_start":136,"line_end":136,"column_start":34,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":34846},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19287,"byte_end":19293,"line_start":138,"line_end":138,"column_start":34,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":34855},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19361,"byte_end":19368,"line_start":140,"line_end":140,"column_start":34,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":34866},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19436,"byte_end":19443,"line_start":142,"line_end":142,"column_start":34,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":34875},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19511,"byte_end":19517,"line_start":144,"line_end":144,"column_start":34,"column_end":40},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":34886},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/zeroable.rs","byte_start":19585,"byte_end":19592,"line_start":146,"line_end":146,"column_start":34,"column_end":41},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":34901},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21059,"byte_end":21067,"line_start":29,"line_end":29,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":14},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21070,"byte_end":21074,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":1937},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21525,"byte_end":21533,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":1,"index":11746},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21561,"byte_end":21567,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21602,"byte_end":21608,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21644,"byte_end":21650,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21686,"byte_end":21692,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21728,"byte_end":21734,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21771,"byte_end":21777,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21815,"byte_end":21821,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21856,"byte_end":21862,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21898,"byte_end":21904,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21940,"byte_end":21946,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":21982,"byte_end":21988,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":22025,"byte_end":22031,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":30003},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":22342,"byte_end":22353,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":1945},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":22388,"byte_end":22400,"line_start":69,"line_end":69,"column_start":29,"column_end":41},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":15830},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23258,"byte_end":23265,"line_start":97,"line_end":97,"column_start":29,"column_end":36},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":34846},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23328,"byte_end":23334,"line_start":99,"line_end":99,"column_start":29,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":34855},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23397,"byte_end":23404,"line_start":101,"line_end":101,"column_start":29,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":34866},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23467,"byte_end":23474,"line_start":103,"line_end":103,"column_start":29,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":34875},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23537,"byte_end":23543,"line_start":105,"line_end":105,"column_start":29,"column_end":35},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":34886},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/pod.rs","byte_start":23606,"byte_end":23613,"line_start":107,"line_end":107,"column_start":29,"column_end":36},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":34901},"to":{"krate":0,"index":110}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/contiguous.rs","byte_start":26762,"byte_end":26766,"line_start":79,"line_end":79,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1937},"to":{"krate":0,"index":156}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/transparent.rs","byte_start":45725,"byte_end":45733,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":92}},"from":{"krate":1,"index":11746},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/louisjohnson/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.0/src/lib.rs","byte_start":7604,"byte_end":7616,"line_start":235,"line_end":235,"column_start":29,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":563},"to":{"krate":1,"index":6208}}]}